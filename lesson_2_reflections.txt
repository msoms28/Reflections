What happens when you initialize a repository? Why do you need to do it?

Git compiles all the files into the repository in a hidden .git file.  It tracks
all of the metadata for each commit within the repo.  You need to do this in order
for Git to know what files to keep track of and to save when you commit your
project.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

The staging area is a cached set of files that would be taken when you run the
commit.  It adds value of being able to control what is being committed into the
repo and can be changed before committing.  The working directory and repo are
set file directories.  They will keep your items saved but do not provide the
flexibility of the staging area.

How can you use the staging area to make sure you have one commit per logical
change?

Even though you have made multiple changes in your code, you can still take one
change at a time and commit it into the repo.  You can repeat the process until
the repo is up to date with commits you wanted from the working directory.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

Branches will help when you want to try something experimental with your project
or if you wanted to have a clean version to show or update if the web server
crashes.

How do the diagrams help you visualize the branch structure?

The diagrams help me visualize what is the master and what is a branch off of the
main.  It can also help you visualize if there is a head that is detached.  The
diagram can be very helpful if you are in a large collaborative group trying to
see where certain versions of the files are located.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?
